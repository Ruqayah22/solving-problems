// function solution(numbers) {
//   let zag = [];

//   for (let i = 0; i <= numbers.length - 2; i++) { //for(let i=0; i<=numbers.length-3 ; i++){
//     if (numbers[i + 1] < numbers[i]) {
//       zag.push(1);
//     } else if (numbers[i + 1] > numbers[i + 2]) {
//       zag.push(1);
//     } else {
//       zag.push(0);
//     }
//   }
//   return zag;
// }
// // ---------------
// // Input:
// // numbers: [1, 2, 1, 3, 4]
// // Output:
// // [1, 1, 0, 0]
// // Expected Output:
// // [1, 1, 0]
// // Input:
// // numbers: [1, 2, 4, 3, 1]
// // Output:
// // [0, 1, 1, 1]
// // Expected Output:
// // [0, 1, 0]
// Input:
// numbers: [1, 5, 7, 3, 10, 2, 4, 9, 8, 6]
// Output:
// [0, 1, 1, 1, 1, 0, 1, 1]
// Expected Output:
// [0, 1, 1, 1, 1, 0, 1, 0]
// // ---------------------------------

// // You are given a string s. Your task is to count the number of ways of splitting s into three non-empty parts a, b and c (s = a + b + c) in such a way that a + b, b + c and c + a are all different strings.

// function solution(s) {
// var count = 0;
// for(var i=0;i<s.length-2;i++){
// for(var j=i+1;j<s.length-1;j++){
// var a = s.slice(0,i+1);
// var b = s.slice(i+1,j+1);
// var c = s.slice(j+1,s.length);
// if((a+b != b+c)&&(b+c != c+a)&&(a+b != c+a)){
// count++;
// }
// }
// }
// return count
// }

// //////////////////////////////////////

// // Given an array of positive integers a, your task is to calculate the sum of every possible a[i] ∘ a[j], where a[i] ∘ a[j] is the concatenation of the string representations of a[i] and a[j] respectively.

// function solution(a) {
//     let sum = 0
//     let z
//     // let s = a.toString()

//     for(let i=0; i< a.length; i++){
//         for(let j = 0 ; j< a.length; j++){
//             z = String(a[i])  + String(a[j])
//             sum += parseInt(z)
//         }

//     }
//     return sum

// }

// /////////////////////////////////
// You are given an array of strings arr. Your task is to construct a string from the words in arr, starting with the 0th character from each word (in the order they appear in arr), followed by the 1st character, then the 2nd character, etc. If one of the words doesn't have an ith character, skip that word.

// Return the resulting string.

// Example

// For arr = ["Daisy", "Rose", "Hyacinth", "Poppy"], the output should be solution(arr) = "DRHPaoyoisapsecpyiynth".
